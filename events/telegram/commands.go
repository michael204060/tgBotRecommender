package telegram

import (
	"errors"
	"fmt"
	"log"
	"strconv"
	"strings"
	"tgBotRecommender/clients/tgClient"
	"tgBotRecommender/lib/e"
	"tgBotRecommender/storage"
	"tgBotRecommender/storage/database"
)

type UserState struct {
	WaitingForPriority bool
	CurrentMessage     string
	CurrentPriority    int
}

var userStates = make(map[int]*UserState)

const (
	SendCmd  = "/send"
	HelpCmd  = "/help"
	StartCmd = "/start"
)

const (
	DeleteAction = "delete"
	KeepAction   = "keep"
	LowerAction  = "lower"
	HigherAction = "higher" // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
	DeletePrefix = "delete_"
	KeepPrefix   = "keep_"
	LowerPrefix  = "lower_"
	HigherPrefix = "higher_" // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è
)

func (p *Processor) sendHighestPriorityMessage(chatID int, userID int) error {
	db, err := database.HandleConn()
	if err != nil {
		return e.Wrap("failed to connect to database", err)
	}
	defer db.Close()

	message, err := p.storage.PickHighestPriority(userID, db)
	if err != nil {
		if errors.Is(err, storage.ErrNoSavedMessages) {
			return p.tg.SendMessage(chatID, msgNoSavedMessage)
		}
		return e.Wrap("failed to pick highest priority message", err)
	}

	// –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	buttons := []tgClient.InlineButton{
		{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", Data: DeletePrefix + strconv.Itoa(message.Index)},
		{Text: "‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å", Data: HigherPrefix + strconv.Itoa(message.Index)},
		{Text: "‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å", Data: LowerPrefix + strconv.Itoa(message.Index)},
	}

	msgText := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (%d):\n\n%s", message.Message.Priority, message.Message.Content)
	return p.tg.SendInlineKeyboard(chatID, msgText, buttons)
}

func (p *Processor) handleCallback(chatID int, userID int, callbackData string) error {
	db, err := database.HandleConn()
	if err != nil {
		return e.Wrap("failed to connect to database", err)
	}
	defer db.Close()

	var messageID int
	var action string

	switch {
	case strings.HasPrefix(callbackData, DeletePrefix):
		messageID, _ = strconv.Atoi(strings.TrimPrefix(callbackData, DeletePrefix))
		action = DeleteAction
	case strings.HasPrefix(callbackData, KeepPrefix):
		// –£–±–∏—Ä–∞–µ–º KeepAction —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
		return p.tg.SendMessage(chatID, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
	case strings.HasPrefix(callbackData, LowerPrefix):
		messageID, _ = strconv.Atoi(strings.TrimPrefix(callbackData, LowerPrefix))
		action = LowerAction
	case strings.HasPrefix(callbackData, HigherPrefix):
		messageID, _ = strconv.Atoi(strings.TrimPrefix(callbackData, HigherPrefix))
		action = HigherAction
	default:
		return fmt.Errorf("unknown callback data: %s", callbackData)
	}

	switch action {
	case DeleteAction:
		if err := p.storage.RemoveByMessageID(messageID, db); err != nil {
			return e.Wrap("failed to remove message", err)
		}
		if err := p.storage.NormalizePriorities(userID, db); err != nil {
			return e.Wrap("failed to normalize priorities", err)
		}
		return p.tg.SendMessage(chatID, "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

	case LowerAction:
		if err := p.storage.LowerPriority(messageID, userID, db); err != nil {
			return e.Wrap("failed to lower priority", err)
		}
		if err := p.storage.NormalizePriorities(userID, db); err != nil {
			return e.Wrap("failed to normalize priorities", err)
		}
		return p.tg.SendMessage(chatID, "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–Ω–∏–∂–µ–Ω. –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

	case HigherAction:
		if err := p.storage.HigherPriority(messageID, userID, db); err != nil {
			return e.Wrap("failed to higher priority", err)
		}
		if err := p.storage.NormalizePriorities(userID, db); err != nil {
			return e.Wrap("failed to normalize priorities", err)
		}
		return p.tg.SendMessage(chatID, "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–≤—ã—à–µ–Ω. –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
	}

	return nil
}

func (p *Processor) doCmd(text string, chatID int, userID int) error {
	text = strings.TrimSpace(text)
	log.Printf("got command: %s from %d", text, chatID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if state, exists := userStates[userID]; exists && state.WaitingForPriority {
		return p.handlePriorityInput(text, userID, chatID)
	}

	switch text {
	case SendCmd:
		return p.sendHighestPriorityMessage(chatID, userID)
	case HelpCmd:
		return p.sendHelp(chatID)
	case StartCmd:
		return p.sendHello(chatID)
	default:
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
		userStates[userID] = &UserState{
			WaitingForPriority: true,
			CurrentMessage:     text,
		}
		return p.tg.SendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):")
	}
}

func (p *Processor) sendHelp(chatID int) error {
	return p.tg.SendMessage(chatID, `–Ø –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ, –∞ –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–∏—Å–ª–æ).
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /send.
–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.`)
}

func (p *Processor) sendHello(chatID int) error {
	return p.tg.SendMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"+`–Ø –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ, –∞ –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–∏—Å–ª–æ).
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /send.
–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.`)
}

func (p *Processor) handlePriorityInput(text string, userID int, chatID int) error {
	priority, err := strconv.Atoi(text)
	if err != nil || priority <= 0 {
		return p.tg.SendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
	}

	state := userStates[userID]
	delete(userStates, userID) // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

	db, err := database.HandleConn()
	if err != nil {
		return e.Wrap("failed to connect to database", err)
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
	exists, err := p.storage.IsPriorityExists(userID, priority, db)
	if err != nil {
		return e.Wrap("failed to check priority", err)
	}
	if exists {
		p.tg.SendMessage(chatID, fmt.Sprintf("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç %d —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", priority))
		// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
		userStates[userID] = state
		return nil
	}

	message := &storage.Message{
		Content:  state.CurrentMessage,
		UserID:   userID,
		Priority: priority,
	}

	if err := p.storage.SaveWithPriority(message, db); err != nil {
		return e.Wrap("failed to save message", err)
	}

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	if err := p.storage.NormalizePriorities(userID, db); err != nil {
		return e.Wrap("failed to normalize priorities", err)
	}

	return p.tg.SendMessage(chatID, fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º %d", priority))
}
